// <auto-generated />
using Doctors.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctors.SPA.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Doctors.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<int>("LanguageId");

                    b.Property<int>("MedicalSchoolId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MedicalSchoolId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Doctors.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("SpecialtyId");

                    b.HasKey("DoctorId", "SpecialtyId");

                    b.HasAlternateKey("DoctorId");

                    b.HasIndex("SpecialtyId")
                        .IsUnique();

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("Doctors.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Doctors.Models.MedicalSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MedicalSchools");
                });

            modelBuilder.Entity("Doctors.Models.PatientRating", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<string>("Comments");

                    b.Property<int>("Rating");

                    b.HasKey("DoctorId", "Comments");

                    b.ToTable("PatientRatings");
                });

            modelBuilder.Entity("Doctors.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Doctors.Models.Doctor", b =>
                {
                    b.HasOne("Doctors.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctors.Models.MedicalSchool", "MedicalSchool")
                        .WithMany()
                        .HasForeignKey("MedicalSchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doctors.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("Doctors.Models.Doctor", "Doctor")
                        .WithOne("DoctorSpecialty")
                        .HasForeignKey("Doctors.Models.DoctorSpecialty", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctors.Models.Specialty", "Specialty")
                        .WithOne("DoctorSpecialty")
                        .HasForeignKey("Doctors.Models.DoctorSpecialty", "SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doctors.Models.PatientRating", b =>
                {
                    b.HasOne("Doctors.Models.Doctor", "Doctor")
                        .WithMany("PatientRating")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
